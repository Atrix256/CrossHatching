get a compute shader taking a structured buffer as input
 may not need it to be able to take a texture as input, so could put that off til later.

* make it auto-clear the reference to textures from both compute shaders and vs/[s]

may not need render target class, we may only need the single render target, and just have compute shaders read/write to default usage textures?
 probably, but maybe the main render target could use the class i dunno

use a structured buffer for triangles? (models being ray traced)

i think i'll need a deferred renderer type setup? I'll have an intermediary buffer that has uv and intensity that i will then process with the shader.

i don't think we need a depth buffer since it'll all be path traced, so remove that (eventually)

do i need to do anything to strip unused shader constants or otherwise only fill in those used etc?

a way to specify a scene? list spheres and meshes. they get loaded and passed through to the scene.

allow a way to specify screen w/h and fullscreen. Command line?

show fps / mspf

test x64 and release

TODO's

Figure out how to get labels that show up in renderdoc

Sean said he'd be willing to give me textures.

Work with sean for the franklin booth technioque?

? how do we make sure we don't write outside of the bounds in the compute shaders?

* put shaders in a shader folder
* put art in an art folder

? am i updating constants correctly?

GetResourceBindingDesc example (not by name, but does have to use strcmp so...)
https://gamedev.stackexchange.com/questions/62361/working-with-d3d11-opengl-shader-reflection

clean up code (spaces after function names etc)

? should i add an assert / asserts everywhere?

? when we create a texture via the macro list, instead of loading it, we probably need some way of specifying size. Not sure how to do that. Need a usage case I guess? Size of screen for now...

? I'm thinking we probably want window borders / close button on this window.

================================= HIGH LEVEL GOALS =================================

1) path trace diffuse / emissive of a scene with a mesh. (monochromatic?)
2) use the brightness values to determine which tileable crosshatching texture to use (trilinear filtering w/ volume texture)
3) success!
4) maybe multiple scenes and some debug displays and such. (IMGUI? Or rely on renderdoc?)

================================= NOTES =================================

DX11 guid: http://www.rastertek.com/dx11tut02.html

