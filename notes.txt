* load crosshatching textures 0-8 as a 3d volume texture. use uv's and (SDR) brightness to make uvw coordinate.
 * render!

! verify that the shaders are branchless w/ the const bool params.

* try some minor optimizations to see if they help much. (write details in notes for blog post i guess)
 * re-use first hit of ray trace.  turn this on / off, see if it affects FPS on any scenes.
 * N samples per call, instead of just the 1.
 * bounding volume (box? sphere?) as pre-test for rays.
 ! actually maybe screw optimizations... the point is the cross hatching. although it would be better if it ran faster...but maybe crosshatching first, speed up investigations after
 * 3 bounces is probably enough. maybe even 2.


* if the path trace really is just outputting float32 R,G,B, maybe a structured buffer would be better than a texture? i dunno

* Models at turbosquid! https://www.turbosquid.com/
 * and unity store
 * and here: https://github.com/movAX13h/HiOctaneTools/tree/master/Unpacked%20Assets/models
 * if using those high octane assets, need to texture them with atlas.png i think.

* get some fun models to use for testing, make some fun scenes.
* make it use textures for shading - using the color to tint the non black parts of the textures. 

? can we make it so you define shaders to load in the macro list, and specify defines there?
 * ie unify ShowPathTrace.fx and ShowPathTraceGrey.fx

! could do a special shader when samplecount = 0, where it finds the first hit and stores time t of first hit in alpha channel. 
 * then re-use that as a starting point for each sample

! maybe do N samples per frame instead of the 1, may decrease time spent on (texture) memory read / write?
 * maybe could also do N samples at each bounce (recursively?) not sure if helpful but maybe

? have c++ side send an iterative sum of golden ratio to shader?
 * or try just adding the random number per frame to it!
  * i tried that and it looked aweful, maybe my prng sucks with seeds that are in 0-1?
 * try and see if you can keep the seed in 0-1?
 * if this works out get rid of app rand and frame number and app time i think.
 ! i tried this 8/29 at lunch and it didn't work out, not sure what the problem is.
 * white noise is probably better over area and time since you are doing more samples not fewer

* bayesian integration would probably be better here since there's no specular. but there is occlusion so...

? get rid of vertex buffer and make it from vertex id

! the path on cornell box has red wall on left, but the "showpathtrace" flips it correctly to red wall on right. should fix that minor wrinkle

! need to keep the rng seed from becoming so huge that small floats don't matter and it stops updating.

show fps / mspf. maybe in title bar? also number of samples?

be able to move camera? reset sample count on camera move? WASD + mouse look?

test x64 and release

TODO's in code

Sean said he'd be willing to give me textures.

? I'm thinking we probably want window borders / close button on this window.

* make it spit out shader-error.txt even if there's just warnings?

* could also directly sample the light to make it converge faster (i think you should, if it's unbiased!)

* will eventually want to make videos probably. A thing to render a frame at a time and then use ffmpeg to combine? Would need logic for updating camera and objects over time. Fixed frame rate update obviously!

? HDR to SDR tone mapping?

* could have a bounding shape on "instanced meshes" which if the ray hits, gives a start/stop triangle index range to test ray against.
 * could also possibly have a scale, translation, rotation for instance.

* get rid of unused models and textures when done

================================= LATER IDEAS =================================

* could do a lens and get depth of field effect. (actually, won't work with this technique).. or will it? why wouldn't it work? (oh... trilinear mapping. would need to do lens flare as a post process!)
* reflections. Probably needs to be done as a post step, but could do N samples and jitter them even.
* anti aliasing? could render at 4x resolution and downsample final image (longer to render though)
* caustics and refraction could be interesting
* Work with sean for the franklin booth technioque?

================================= HIGH LEVEL GOALS =================================

1) path trace diffuse / emissive of a scene with a mesh. (monochromatic?)
2) use the brightness values to determine which tileable crosshatching texture to use (trilinear filtering w/ volume texture)
3) success!
4) maybe multiple scenes and some debug displays and such. (IMGUI? Or rely on renderdoc?)

================================= NOTES =================================

DX11 guid: http://www.rastertek.com/dx11tut02.html

* when writing a CPU path tracer, each time i needed a random number, i just called rand() basically. very easy.
 * on gpu, not so easy to generate random numbers! (could show problems of doign it incorrectly)
 * ended up using a blue noise texture as initial seed, and adding frame number * golden ratio to make it a low discrepancy sequence over time.

* free blue nois textures: http://momentsingraphics.de/?p=127