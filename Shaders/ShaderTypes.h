//This file is autogenerated by WriteShaderTypesHLSL(), using ShaderTypesList.h as source data

//----------------------------------------------------------------------------
//Samplers
//----------------------------------------------------------------------------
SamplerState SamplerLinearWrap;
SamplerState SamplerNearestWrap;
SamplerState SamplerAnisoWrap;

//----------------------------------------------------------------------------
//Textures
//----------------------------------------------------------------------------
Texture2D blueNoise256;
RWTexture2D<float4> blueNoise256_rw;

Texture2D crosshatch0;
RWTexture2D<float4> crosshatch0_rw;

Texture2D crosshatch1;
RWTexture2D<float4> crosshatch1_rw;

Texture2D crosshatch2;
RWTexture2D<float4> crosshatch2_rw;

Texture2D crosshatch3;
RWTexture2D<float4> crosshatch3_rw;

Texture2D crosshatch4;
RWTexture2D<float4> crosshatch4_rw;

Texture2D crosshatch5;
RWTexture2D<float4> crosshatch5_rw;

Texture2D crosshatch6;
RWTexture2D<float4> crosshatch6_rw;

Texture2D crosshatch7;
RWTexture2D<float4> crosshatch7_rw;

Texture2D crosshatch8;
RWTexture2D<float4> crosshatch8_rw;

Texture2D pathTraceOutput;
RWTexture2D<float4> pathTraceOutput_rw;

Texture3D crosshatchvolume;

//----------------------------------------------------------------------------
//Constant Buffers
//----------------------------------------------------------------------------
cbuffer ConstantsOnce
{
  float4 cameraPos_FOVX;
  float4 cameraAt_FOVY;
  float4 nearPlaneDist_missColor;
  uint4 numSpheres_numTris_numOBBs_numQuads;
  float4 uvmultiplier_yzw;
};

cbuffer ConstantsPerFrame
{
  float4 frameRnd_appTime_zw;
  uint4 sampleCount_yzw;
};

//----------------------------------------------------------------------------
//Vertex Formats
//----------------------------------------------------------------------------
struct Pos2D
{
  float4 position : POSITION0;
};

//----------------------------------------------------------------------------
//Structured Buffer Types
//----------------------------------------------------------------------------
struct SpherePrim
{
  float4 position_Radius;
  float4 albedo_w;
  float4 emissive_w;
};

struct TrianglePrim
{
  float4 positionA_w;
  float4 positionB_w;
  float4 positionC_w;
  float4 normal_w;
  float4 albedo_w;
  float4 emissive_w;
};

struct QuadPrim
{
  float4 positionA_w;
  float4 positionB_w;
  float4 positionC_w;
  float4 positionD_w;
  float4 normal_w;
  float4 albedo_w;
  float4 emissive_w;
};

struct OBBPrim
{
  float4 position_w;
  float4 radius_w;
  float4 XAxis_w;
  float4 YAxis_w;
  float4 ZAxis_w;
  float4 albedo_w;
  float4 emissive_w;
};

struct FirstRayHit
{
  float4 surfaceNormal_intersectTime;
  float4 albedo_w;
  float4 emissive_w;
};

//----------------------------------------------------------------------------
//Structured Buffers
//----------------------------------------------------------------------------
StructuredBuffer<SpherePrim> Spheres;
RWStructuredBuffer<SpherePrim> Spheres_rw;

StructuredBuffer<TrianglePrim> Triangles;
RWStructuredBuffer<TrianglePrim> Triangles_rw;

StructuredBuffer<QuadPrim> Quads;
RWStructuredBuffer<QuadPrim> Quads_rw;

StructuredBuffer<OBBPrim> OBBs;
RWStructuredBuffer<OBBPrim> OBBs_rw;

StructuredBuffer<FirstRayHit> FirstRayHits;
RWStructuredBuffer<FirstRayHit> FirstRayHits_rw;

